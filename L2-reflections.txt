1. What happens when you initialize a repository? Why do you need to do it?
	Git creates the .git directory to track changes to the files. If you don't do this, then git has no way of treating the directory as a repository.

2. How is the staging area different from the working directory and the repository? What value do you think it offers?
	The staging area is just a concept of which files in the working directory are ready to be committed to the repository. It is useful to keep track of changes and what files should go into the next commit.

3. How can you use the staging area to make sure you have one commit per logical change?
	You only add files to the staging area that belong in the next commit. Other files can stay in the working directory for staging/commit later.

4. What are some situations when branches would be helpful in keeping your history organized? How would branches help?
	When you have changes that you are not sure if you will commmit later, or when you don't want to interfere with making changes to the master branch. You can still make bug-fixes or other changes to the master version before the branch is ready to commit.

5. How do the diagrams help you visualize the branch structure?
	They show how it is possible to make new branches. How you can make changes to an old commit to see if it works, and make a new branch to keep it, or go back to a branch to discard it.

6. What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
	All changes for both branches are merged together, so the two branches come together into one new commit.

7. What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
	When the things that are merged do not relate to each other, the automatic merging saves lots of time. If the merges are related but in different parts of the code, it is possible for the automatic merge to break things. One could argue that the project management was poor, if two people are making related changes and don't know about each other. Manual merges still have lots of room for human error when one person does the manual merging, if that person doesn't fully understand the other persons changes.
	
